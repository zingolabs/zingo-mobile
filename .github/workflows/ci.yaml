name: CI

on:
  pull_request:
  push:
    branches: [main, dev]

jobs:
  test:
    name: Test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - run: yarn install
      
      - name: Run tests
        run: yarn test
  
  create-timestamp:
    name: Create timestamp
    runs-on: ubuntu-22.04
    outputs:
      timestamp: ${{ steps.create-timestamp.outputs.timestamp }}
    steps:
      - name: Create timestamp
        id: create-timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

  build:
    name: Build native rust (${{ matrix.abi }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - abi: x86
            target: i686-linux-android
            cc: i686-linux-android
            openssl_path: x86
          - abi: x86_64
            target: x86_64-linux-android
            cc: x86_64-linux-android
            openssl_path: x86_64
          - abi: armeabi-v7a
            target: armv7-linux-androideabi
            cc: armv7a-linux-androideabi
            openssl_path: armv7
          - abi: arm64-v8a
            target: aarch64-linux-android
            cc: aarch64-linux-android
            openssl_path: aarch64
    needs: create-timestamp
    env:
      timestamp: ${{ needs.create-timestamp.outputs.timestamp }}
      RUSTUP_HOME: /root/.rustup
    container:
      image: zingodevops/android_builder:stable
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Cargo cache
        uses: actions/cache@v3
        id: cargo-cache
        with:
          # TODO: ref paths from cargo
          path: |
            /root/.cargo/.crates.toml
            /root/.cargo/.crates2.json
            /root/.cargo/bin/
            /root/.cargo/registry/index/            
            /root/.cargo/registry/cache/
            /root/.cargo/registry/git/db/
          key: cargo-${{ matrix.abi }}-${{ hashFiles('rust/Cargo.lock') }}
          restore-keys: cargo-${{ matrix.abi }}
      
      - name: Cargo build
        working-directory: ./rust/android
        run: cargo +nightly build -Z build-std --target ${{ matrix.target }} --release
        env:
          AR: llvm-ar
          LD: ld
          RANLIB: llvm-ranlib
          CC: ${{ matrix.cc }}23-clang
          OPENSSL_DIR: /opt/openssl-3.0.5/${{ matrix.openssl_path }}
      
      - name: LLVM Strip
        working-directory: ./rust/target
        run: llvm-strip ./${{ matrix.target }}/release/librust.so
      
      - name: Upload native rust
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.abi }}-${{ env.timestamp }}
          path: rust/target/${{ matrix.target }}/release/librust.so
  
  integration_test:
    name: Integration test
    runs-on: macos-12
    strategy:
      matrix:
        include:
          - abi: x86
            avd: x86
            api-level: 29
            target: default
            channel: stable
          - abi: x86_64
            avd: x86_64
            api-level: 30
            target: default
            channel: stable
          - abi: arm64-v8a
            avd: arm64-v8a
            # avd: x86_64
            api-level: 30
            target: aosp_atd
            channel: canary
          - abi: arm64-v8a
            avd: arm64-v8a
            # avd: x86_64
            api-level: 29
            target: default
            channel: stable
    needs: [create-timestamp, build]
    env:
      timestamp: ${{ needs.create-timestamp.outputs.timestamp }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      
      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
      
      - name: Gradle cache
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: 7.3.3
          build-root-directory: ./android
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/dev' }}
      
      - name: AVD cache
        uses: actions/cache@v3
        id: avd-cache
        with: 
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.avd }}-api-${{ matrix.api-level }}      
      
      - name: Download native rust
        uses: actions/download-artifact@v3
        with: 
          name: ${{ matrix.abi }}-${{ env.timestamp }}
          path: android/app/src/main/jniLibs/${{ matrix.abi }}
      
      - run: yarn install
      
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.avd }}
          target: ${{ matrix.target }}
          channel: ${{ matrix.channel }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."      i

      - name: Run integration tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          working-directory: ./android
          api-level: ${{ matrix.api-level }}
          arch: ${{ matrix.avd }}
          target: ${{ matrix.target }}
          channel: ${{ matrix.channel }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedCheck -Pandroid.testInstrumentationRunnerArguments.class=org.ZingoLabs.Zingo.IntegrationTestSuite
